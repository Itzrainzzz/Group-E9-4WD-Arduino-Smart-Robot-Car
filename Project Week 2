#include <LiquidCrystal.h>

const int encoderLeft_AO_pin = A4;
const int encoderRight_AO_pin = A3; 

const int threshold = 512; 
int lastAnalogLeft = 0, lastAnalogRight = 0; 
volatile long encoderLeft_count = 0, encoderRight_count = 0; 

const float wheel_diameter = 6.0; 
const int encoder_resolution = 20; 

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

#define ENA 3 
#define IN1 2  
#define IN2 13  
#define ENB 10  
#define IN3 12 
#define IN4 11

#define IR_LEFT A2
#define IR_RIGHT A1

const int IR_THRESHOLD = 300;

unsigned long startTime = 0;    
unsigned long elapsedTime = 0;  
bool isMoving = false;          

void setup() {
  lcd.begin(16, 2);

  pinMode(IR_LEFT, INPUT);
  pinMode(IR_RIGHT, INPUT);

  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  pinMode(encoderLeft_AO_pin, INPUT);
  pinMode(encoderRight_AO_pin, INPUT);

  analogWrite(ENA, 0);
  analogWrite(ENB, 0);

  Serial.begin(9600);
}

void loop() {
  int leftSensor = analogRead(IR_LEFT);
  int rightSensor = analogRead(IR_RIGHT);

  if (leftSensor > IR_THRESHOLD || rightSensor > IR_THRESHOLD) {
    if (!isMoving) {  
      startTime = millis();   
      isMoving = true;        
      lcd.setCursor(0, 0);
      lcd.print("Time: 0.00 sec"); 
    }
  } else {
    if (isMoving) {  
      elapsedTime = millis() - startTime; 
      isMoving = false;                   

      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Time:      secs");
      lcd.setCursor(6, 0);
      lcd.print(elapsedTime / 1000.0, 2);
    }  
  }

  if (isMoving) {
    unsigned long currentTime = millis() - startTime; 
    lcd.setCursor(0, 0);
    lcd.print("Time: ");
    lcd.print(currentTime / 1000.0, 2); 
    lcd.print(" sec ");
  }

  if (leftSensor > IR_THRESHOLD && rightSensor > IR_THRESHOLD) {
    moveForward();
  } else if (leftSensor < IR_THRESHOLD && rightSensor > IR_THRESHOLD) {
    turnLeft();
  } else if (leftSensor > IR_THRESHOLD && rightSensor < IR_THRESHOLD) {
    turnRight();
  } else if (leftSensor < IR_THRESHOLD && rightSensor < IR_THRESHOLD) {
    stopMotors();
  }

  int analogLeft = analogRead(encoderLeft_AO_pin);
  int analogRight = analogRead(encoderRight_AO_pin);

  if ((analogLeft > threshold) && (lastAnalogLeft <= threshold)) {
    encoderLeft_count++;
  }
  if ((analogRight > threshold) && (lastAnalogRight <= threshold)) {
    encoderRight_count++;
  }

  lastAnalogLeft = analogLeft;
  lastAnalogRight = analogRight;

  float distanceLeft = calculateDistance(encoderLeft_count);
  float distanceRight = calculateDistance(encoderRight_count);
  float averageDistance = (distanceLeft + distanceRight) / 2;

  lcd.setCursor(0, 1);
  lcd.print("Dist: ");
  lcd.print(averageDistance, 1);
  lcd.print(" cm  ");

  int sensorValue = analogRead(A2);
  Serial.println(sensorValue);
  delay(500); 
}

void moveForward() {
  analogWrite(ENA, 120);
  analogWrite(ENB, 120);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

void turnLeft() {
  analogWrite(ENA, 255);
  analogWrite(ENB, 255);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

void turnRight() {
  analogWrite(ENA, 255);
  analogWrite(ENB, 255);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

void stopMotors() {
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}

float calculateDistance(long pulses) {
  float wheel_circumference = wheel_diameter * PI; //cm
  float distance_per_pulse = wheel_circumference / encoder_resolution;
  return pulses * distance_per_pulse;
}
